{
    "Description": "A minimal CloudFormation template to create a website with CloudFront, S3, API Gateway and Lambda",

    "Resources": {
        "S3Bucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "AccessControl": "PublicRead",
                "WebsiteConfiguration": {
                    "IndexDocument": "index.html",
                    "ErrorDocument": "error.html"
                }
            }
        }, 

        "CloudFrontDistribution": {
            "Type": "AWS::CloudFront::Distribution",
            "Properties": {
                "DistributionConfig": {
                    "Enabled": "true",
                    "DefaultRootObject": "index.html",
                    "PriceClass": "PriceClass_100",
                    "Origins": [
                        {
                            "Id": "static-content",
                            "CustomOriginConfig": {"OriginProtocolPolicy": "http-only"},
                            "DomainName": {
                                "Fn::Join": ["", [{"Ref": "S3Bucket"}, ".s3-website-us-east-1.amazonaws.com"]]
                            }
                        },
                        {
                            "Id": "api-gateway",
                            "CustomOriginConfig": {"OriginProtocolPolicy": "https-only"},
                            "DomainName": {"Fn::Join": ["", [{"Ref": "APIGatewayRestApi"}, ".execute-api.", {"Ref": "AWS::Region"}, ".amazonaws.com"]]},
                            "OriginPath": "/prod"
                        }
                    ],
                    "CacheBehaviors": [
                        {
                            "PathPattern": "/hello",
                            "TargetOriginId": "api-gateway",
                            "ForwardedValues": {"QueryString": "false"},
                            "ViewerProtocolPolicy": "allow-all"
                        }
                    ],
                    "DefaultCacheBehavior": {
                        "TargetOriginId": "static-content",
                        "ForwardedValues": {"QueryString": "false"},
                        "ViewerProtocolPolicy": "allow-all"
                    }
                }
            }
        },

        "LambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Handler": "index.say_hello",
                "Role": {"Fn::GetAtt": ["LambdaExecutionRole", "Arn"]},
                "Runtime": "python3.6",
                "Code": {
                    "ZipFile": {
                        "Fn::Join": ["\n", [
                            "def say_hello(event, context):",
                            "  return 'Hello from Lambda'"
                        ]]
                    }
                }
            }
        },

        "LambdaExecutionRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [{
                        "Effect": "Allow",
                        "Principal": { "Service": ["lambda.amazonaws.com"] },
                        "Action": ["sts:AssumeRole"]
                    }]
                },
                "ManagedPolicyArns": ["arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"]
            }
        },

        "LambdaPermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "Action": "lambda:invokeFunction",
                "FunctionName": {"Fn::GetAtt": ["LambdaFunction", "Arn"]},
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                    "Fn::Join": ["", ["arn:aws:execute-api:", {"Ref": "AWS::Region"}, ":", {"Ref": "AWS::AccountId"}, ":", {"Ref": "APIGatewayRestApi"}, "/*"]]
                }
            }
        },

        "APIGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
                "Name": "SayHelloAPI"
            }
        },

        "APIGatewayDeployment": {
            "Type": "AWS::ApiGateway::Deployment",
            "DependsOn": "APIGatewayMethod",
            "Properties": {
                "RestApiId": {"Ref": "APIGatewayRestApi"},
                "StageName": "prod"
            }
        },

        "APIGatewayResource": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "RestApiId": {"Ref": "APIGatewayRestApi"},
                "ParentId": {"Fn::GetAtt": ["APIGatewayRestApi", "RootResourceId"]},
                "PathPart": "hello"
            }
        },

        "APIGatewayMethod": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "GET",
                "ResourceId": {"Ref": "APIGatewayResource"},
                "RestApiId": {"Ref": "APIGatewayRestApi"},
                "Integration": {
                    "Type": "AWS",
                    "IntegrationHttpMethod": "POST",
                    "Uri": {
                        "Fn::Join": ["", [
                            "arn:aws:apigateway:", {"Ref": "AWS::Region"}, ":lambda:path/2015-03-31/functions/", {"Fn::GetAtt": ["LambdaFunction", "Arn"]}, "/invocations"
                        ]]
                    },
                    "IntegrationResponses": [{"StatusCode": "200"}]
                },
                "MethodResponses": [{"StatusCode": "200"}]
            }
        }
    },

    "Outputs": {
        "BucketName": {
            "Description": "Name of the bucket to hold static content",
            "Value": {"Ref": "S3Bucket"}
        },
        "SiteURL": {
            "Description": "URL of your new website",
            "Value": {
                "Fn::Join": ["", ["https://", {"Fn::GetAtt": ["CloudFrontDistribution", "DomainName"]}]]
            }
        }
    }
}